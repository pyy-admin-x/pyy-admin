<template>
  <div class="container">
	<!--工具栏-->
	<div class="toolbar" >
		<el-form :inline="true" :model="params" size="small">
			<el-form-item>
				<el-input v-model="params.name" placeholder="名称"></el-input>
			</el-form-item>
			<el-form-item>
				<el-button type="primary" size="small" icon="el-icon-search" @click="handleQuery()">查询</el-button>
			</el-form-item>
			<el-form-item>
				<el-button type="primary" size="small" icon="el-icon-plus" @click.prevent="handleAdd" >新增</el-button>
			</el-form-item>
		</el-form>
	</div>
	<!--表格内容栏-->
	<el-table :data="list" @selection-change="handleSelectionChange">style="width: 100%">
	    <el-table-column type="selection" width="55"/>
    <%
        for(column in table.columns) {
    %>
        <el-table-column prop="${column.fieldName}" label="${column.description}" />
    <%
    	}
    %>
        <el-table-column label="操作" align="center">
            <template slot-scope="scope">
              <el-button size="mini" icon="el-icon-edit" type="primary"  @click="handleEdit(scope.row.id)">编辑</el-button>
              <el-button size="mini" icon="el-icon-delete" type="danger"  @click="handleDelete(scope.row.id)">删除</el-button>
            </template>
          </el-table-column>
	</el-table>

	<!-- 分页工具栏 -->
    <el-pagination @size-change="handleSizeChange"
                   @current-change="handleCurrentChange"
                   :current-page="currentPage"
                   :page-sizes="[5, 10, 15, 30, 40]"
                   :page-size="size"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total" style="margin-top: 15px">
    </el-pagination>

     <!-- 新增或修改${table.description} -->
     <${table.objectName}-modal ref="${table.objectName}Modal" ></${table.objectName}-modal>
  </div>
</template>

<script>
  import * as ${table.objectName}API from '@/api/system/${table.objectName}/index'
  import ${table.objectName}Modal from './${table.objectName}Modal.vue'
  export default {
      data() {
        return {
          list: [], // ${table.description}列表
          total: 0,
          currentPage: 1,
          page: 1,//页码
          size: 5,//每页显示个数
          params: {
            name: '',// ${table.description}名称
          },
          selections: [], // 选择项
          isShowAddModal: false, // 新增${table.description}Drawer显示状态
        }
      },
      mounted () {
        // 默认查询${table.description}
        this.handleQuery()
      },
      methods: {
        // 查询
        async handleQuery () {
          const result = await ${table.objectName}API.get${table.className}PageList(this.page, this.size, this.params)
          const queryResult = result.data
          this.total = queryResult.total
          this.list = queryResult.records
        },
        handleSelectionChange(selections) {
          this.selections = selections
        },
        handleAdd () {
          this.$refs.${table.objectName}Modal.title = '新增'
          this.$refs.${table.objectName}Modal.openAdd()
        },
        handleEdit (id) {
          this.$refs.${table.objectName}Modal.title = '编辑'
          this.$refs.${table.objectName}Modal.openEdit(id)
        },
        handleDelete (id) {
          this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {
            type: 'warning'
          }).then(async () => {
            // 执行异步删除
            await ${table.objectName}API.delete${table.className}(id)
            this.$message({type: 'success', message: '删除成功!'});
            // 刷新列表
            this.handleQuery()

          }).catch(() => {
            //this.$message({type: 'info', message: '已取消删除'});
          });
        },
        handleBatchDelete () {
          this.$confirm('此操作将永久删除选中数据, 是否继续?', '提示', {
            type: 'warning'
          }).then(async () => {
            // 执行异步批量删除
            const ids = this.selections.map(item => item.id)
            await ${table.objectName}API.deleteBatch${table.className}(ids)
            this.$message({type: 'success', message: '删除成功!'});
            // 刷新列表
            this.handleQuery()

          }).catch(() => {
            //this.$message({type: 'info', message: '已取消删除'});
          });
        },
        handleSizeChange(size) {
          this._changePage(this.page, size)
        },
        handleCurrentChange(page) {
          this._changePage(page, this.size)
        },
        // 分页查询
        _changePage (page, size) {
          this.page = page
          this.size = size
          this.handleQuery()
        },
      },
      components: {
        ${table.objectName}Modal
      }
    }
</script>

<style>

</style>